/**
 * FOM API
 * API for FOM backend
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

import { ProjectCountByDistrictResponse } from '../model/models';
import { ProjectCountByForestClientResponse } from '../model/models';
import { PublicCommentCountByCategoryResponse } from '../model/models';
import { PublicCommentCountByDistrictResponse } from '../model/models';
import { PublicCommentCountByForestClientResponse } from '../model/models';
import { PublicCommentCountByProjectResponse } from '../model/models';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';



@Injectable({
  providedIn: 'root'
})
export class AnalyticsDashboardService {

    protected basePath = 'http://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    public encoder: HttpParameterCodec;

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }


    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        } else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }

    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {
        if (value == null) {
            return httpParams;
        }

        if (typeof value === "object") {
            if (Array.isArray(value)) {
                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            } else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key,
                        (value as Date).toISOString().substr(0, 10));
                } else {
                   throw Error("key may not be null if value is Date");
                }
            } else {
                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(
                    httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        } else if (key != null) {
            httpParams = httpParams.append(key, value);
        } else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }

    /**
     * Get number of public comments created in a user selected date range, grouped by district
     * @param startDate Start date in YYYY-MM-DD format
     * @param endDate End date in YYYY-MM-DD format
     * @param projectPlanCode Project plan code filter (FSP, WOODLOT, ALL). Default to FSP
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public analyticsDashboardControllerGetCommentCountByDistrict(startDate: string, endDate: string, projectPlanCode?: 'FSP' | 'WOODLOT' | 'ALL', observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<Array<PublicCommentCountByDistrictResponse>>;
    public analyticsDashboardControllerGetCommentCountByDistrict(startDate: string, endDate: string, projectPlanCode?: 'FSP' | 'WOODLOT' | 'ALL', observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<Array<PublicCommentCountByDistrictResponse>>>;
    public analyticsDashboardControllerGetCommentCountByDistrict(startDate: string, endDate: string, projectPlanCode?: 'FSP' | 'WOODLOT' | 'ALL', observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<Array<PublicCommentCountByDistrictResponse>>>;
    public analyticsDashboardControllerGetCommentCountByDistrict(startDate: string, endDate: string, projectPlanCode?: 'FSP' | 'WOODLOT' | 'ALL', observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {
        if (startDate === null || startDate === undefined) {
            throw new Error('Required parameter startDate was null or undefined when calling analyticsDashboardControllerGetCommentCountByDistrict.');
        }
        if (endDate === null || endDate === undefined) {
            throw new Error('Required parameter endDate was null or undefined when calling analyticsDashboardControllerGetCommentCountByDistrict.');
        }

        let queryParameters = new HttpParams({encoder: this.encoder});
        if (startDate !== undefined && startDate !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>startDate, 'startDate');
        }
        if (endDate !== undefined && endDate !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>endDate, 'endDate');
        }
        if (projectPlanCode !== undefined && projectPlanCode !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>projectPlanCode, 'projectPlanCode');
        }

        let headers = this.defaultHeaders;

        let credential: string | undefined;
        // authentication (bearer) required
        credential = this.configuration.lookupCredential('bearer');
        if (credential) {
            headers = headers.set('Authorization', 'Bearer ' + credential);
        }

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        let responseType: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }

        return this.httpClient.get<Array<PublicCommentCountByDistrictResponse>>(`${this.configuration.basePath}/api/analytics-dashboard/public-comment/count-by-district`,
            {
                params: queryParameters,
                responseType: <any>responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get number of public comments created in a user selected date range, grouped by forest clients
     * @param startDate Start date in YYYY-MM-DD format
     * @param endDate End date in YYYY-MM-DD format
     * @param projectPlanCode Project plan code filter (FSP, WOODLOT, ALL). Default to FSP
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public analyticsDashboardControllerGetCommentCountByForestClient(startDate: string, endDate: string, projectPlanCode?: 'FSP' | 'WOODLOT' | 'ALL', observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<Array<PublicCommentCountByForestClientResponse>>;
    public analyticsDashboardControllerGetCommentCountByForestClient(startDate: string, endDate: string, projectPlanCode?: 'FSP' | 'WOODLOT' | 'ALL', observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<Array<PublicCommentCountByForestClientResponse>>>;
    public analyticsDashboardControllerGetCommentCountByForestClient(startDate: string, endDate: string, projectPlanCode?: 'FSP' | 'WOODLOT' | 'ALL', observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<Array<PublicCommentCountByForestClientResponse>>>;
    public analyticsDashboardControllerGetCommentCountByForestClient(startDate: string, endDate: string, projectPlanCode?: 'FSP' | 'WOODLOT' | 'ALL', observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {
        if (startDate === null || startDate === undefined) {
            throw new Error('Required parameter startDate was null or undefined when calling analyticsDashboardControllerGetCommentCountByForestClient.');
        }
        if (endDate === null || endDate === undefined) {
            throw new Error('Required parameter endDate was null or undefined when calling analyticsDashboardControllerGetCommentCountByForestClient.');
        }

        let queryParameters = new HttpParams({encoder: this.encoder});
        if (startDate !== undefined && startDate !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>startDate, 'startDate');
        }
        if (endDate !== undefined && endDate !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>endDate, 'endDate');
        }
        if (projectPlanCode !== undefined && projectPlanCode !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>projectPlanCode, 'projectPlanCode');
        }

        let headers = this.defaultHeaders;

        let credential: string | undefined;
        // authentication (bearer) required
        credential = this.configuration.lookupCredential('bearer');
        if (credential) {
            headers = headers.set('Authorization', 'Bearer ' + credential);
        }

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        let responseType: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }

        return this.httpClient.get<Array<PublicCommentCountByForestClientResponse>>(`${this.configuration.basePath}/api/analytics-dashboard/public-comment/count-by-forest-client`,
            {
                params: queryParameters,
                responseType: <any>responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get number of public comments created in a user selected date range, grouped by response code
     * @param startDate Start date in YYYY-MM-DD format
     * @param endDate End date in YYYY-MM-DD format
     * @param projectPlanCode Project plan code filter (FSP, WOODLOT, ALL). Default to FSP
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public analyticsDashboardControllerGetCommentCountByResponseCode(startDate: string, endDate: string, projectPlanCode?: 'FSP' | 'WOODLOT' | 'ALL', observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<Array<PublicCommentCountByCategoryResponse>>;
    public analyticsDashboardControllerGetCommentCountByResponseCode(startDate: string, endDate: string, projectPlanCode?: 'FSP' | 'WOODLOT' | 'ALL', observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<Array<PublicCommentCountByCategoryResponse>>>;
    public analyticsDashboardControllerGetCommentCountByResponseCode(startDate: string, endDate: string, projectPlanCode?: 'FSP' | 'WOODLOT' | 'ALL', observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<Array<PublicCommentCountByCategoryResponse>>>;
    public analyticsDashboardControllerGetCommentCountByResponseCode(startDate: string, endDate: string, projectPlanCode?: 'FSP' | 'WOODLOT' | 'ALL', observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {
        if (startDate === null || startDate === undefined) {
            throw new Error('Required parameter startDate was null or undefined when calling analyticsDashboardControllerGetCommentCountByResponseCode.');
        }
        if (endDate === null || endDate === undefined) {
            throw new Error('Required parameter endDate was null or undefined when calling analyticsDashboardControllerGetCommentCountByResponseCode.');
        }

        let queryParameters = new HttpParams({encoder: this.encoder});
        if (startDate !== undefined && startDate !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>startDate, 'startDate');
        }
        if (endDate !== undefined && endDate !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>endDate, 'endDate');
        }
        if (projectPlanCode !== undefined && projectPlanCode !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>projectPlanCode, 'projectPlanCode');
        }

        let headers = this.defaultHeaders;

        let credential: string | undefined;
        // authentication (bearer) required
        credential = this.configuration.lookupCredential('bearer');
        if (credential) {
            headers = headers.set('Authorization', 'Bearer ' + credential);
        }

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        let responseType: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }

        return this.httpClient.get<Array<PublicCommentCountByCategoryResponse>>(`${this.configuration.basePath}/api/analytics-dashboard/public-comment/count-by-responsecode`,
            {
                params: queryParameters,
                responseType: <any>responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get total number of non-initial FOMs published in a user selected date range
     * @param startDate Start date in YYYY-MM-DD format
     * @param endDate End date in YYYY-MM-DD format
     * @param projectPlanCode Project plan code filter (FSP, WOODLOT, ALL). Default to FSP
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public analyticsDashboardControllerGetNonInitialPublishedProjectCount(startDate: string, endDate: string, projectPlanCode?: 'FSP' | 'WOODLOT' | 'ALL', observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<number>;
    public analyticsDashboardControllerGetNonInitialPublishedProjectCount(startDate: string, endDate: string, projectPlanCode?: 'FSP' | 'WOODLOT' | 'ALL', observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<number>>;
    public analyticsDashboardControllerGetNonInitialPublishedProjectCount(startDate: string, endDate: string, projectPlanCode?: 'FSP' | 'WOODLOT' | 'ALL', observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<number>>;
    public analyticsDashboardControllerGetNonInitialPublishedProjectCount(startDate: string, endDate: string, projectPlanCode?: 'FSP' | 'WOODLOT' | 'ALL', observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {
        if (startDate === null || startDate === undefined) {
            throw new Error('Required parameter startDate was null or undefined when calling analyticsDashboardControllerGetNonInitialPublishedProjectCount.');
        }
        if (endDate === null || endDate === undefined) {
            throw new Error('Required parameter endDate was null or undefined when calling analyticsDashboardControllerGetNonInitialPublishedProjectCount.');
        }

        let queryParameters = new HttpParams({encoder: this.encoder});
        if (startDate !== undefined && startDate !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>startDate, 'startDate');
        }
        if (endDate !== undefined && endDate !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>endDate, 'endDate');
        }
        if (projectPlanCode !== undefined && projectPlanCode !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>projectPlanCode, 'projectPlanCode');
        }

        let headers = this.defaultHeaders;

        let credential: string | undefined;
        // authentication (bearer) required
        credential = this.configuration.lookupCredential('bearer');
        if (credential) {
            headers = headers.set('Authorization', 'Bearer ' + credential);
        }

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        let responseType: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }

        return this.httpClient.get<number>(`${this.configuration.basePath}/api/analytics-dashboard/project/count`,
            {
                params: queryParameters,
                responseType: <any>responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get number of non-initial FOMs published in a user selected date range, grouped by district
     * @param startDate Start date in YYYY-MM-DD format
     * @param endDate End date in YYYY-MM-DD format
     * @param projectPlanCode Project plan code filter (FSP, WOODLOT, ALL). Default to FSP
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public analyticsDashboardControllerGetNonInitialPublishedProjectCountByDistrict(startDate: string, endDate: string, projectPlanCode?: 'FSP' | 'WOODLOT' | 'ALL', observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<Array<ProjectCountByDistrictResponse>>;
    public analyticsDashboardControllerGetNonInitialPublishedProjectCountByDistrict(startDate: string, endDate: string, projectPlanCode?: 'FSP' | 'WOODLOT' | 'ALL', observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<Array<ProjectCountByDistrictResponse>>>;
    public analyticsDashboardControllerGetNonInitialPublishedProjectCountByDistrict(startDate: string, endDate: string, projectPlanCode?: 'FSP' | 'WOODLOT' | 'ALL', observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<Array<ProjectCountByDistrictResponse>>>;
    public analyticsDashboardControllerGetNonInitialPublishedProjectCountByDistrict(startDate: string, endDate: string, projectPlanCode?: 'FSP' | 'WOODLOT' | 'ALL', observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {
        if (startDate === null || startDate === undefined) {
            throw new Error('Required parameter startDate was null or undefined when calling analyticsDashboardControllerGetNonInitialPublishedProjectCountByDistrict.');
        }
        if (endDate === null || endDate === undefined) {
            throw new Error('Required parameter endDate was null or undefined when calling analyticsDashboardControllerGetNonInitialPublishedProjectCountByDistrict.');
        }

        let queryParameters = new HttpParams({encoder: this.encoder});
        if (startDate !== undefined && startDate !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>startDate, 'startDate');
        }
        if (endDate !== undefined && endDate !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>endDate, 'endDate');
        }
        if (projectPlanCode !== undefined && projectPlanCode !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>projectPlanCode, 'projectPlanCode');
        }

        let headers = this.defaultHeaders;

        let credential: string | undefined;
        // authentication (bearer) required
        credential = this.configuration.lookupCredential('bearer');
        if (credential) {
            headers = headers.set('Authorization', 'Bearer ' + credential);
        }

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        let responseType: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }

        return this.httpClient.get<Array<ProjectCountByDistrictResponse>>(`${this.configuration.basePath}/api/analytics-dashboard/project/count-by-district`,
            {
                params: queryParameters,
                responseType: <any>responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get number of non-initial FOMs published in a user selected date range, grouped by forest client numbers
     * @param startDate Start date in YYYY-MM-DD format
     * @param endDate End date in YYYY-MM-DD format
     * @param projectPlanCode Project plan code filter (FSP, WOODLOT, ALL). Default to FSP
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public analyticsDashboardControllerGetNonInitialPublishedProjectCountByForestClient(startDate: string, endDate: string, projectPlanCode?: 'FSP' | 'WOODLOT' | 'ALL', observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<Array<ProjectCountByForestClientResponse>>;
    public analyticsDashboardControllerGetNonInitialPublishedProjectCountByForestClient(startDate: string, endDate: string, projectPlanCode?: 'FSP' | 'WOODLOT' | 'ALL', observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<Array<ProjectCountByForestClientResponse>>>;
    public analyticsDashboardControllerGetNonInitialPublishedProjectCountByForestClient(startDate: string, endDate: string, projectPlanCode?: 'FSP' | 'WOODLOT' | 'ALL', observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<Array<ProjectCountByForestClientResponse>>>;
    public analyticsDashboardControllerGetNonInitialPublishedProjectCountByForestClient(startDate: string, endDate: string, projectPlanCode?: 'FSP' | 'WOODLOT' | 'ALL', observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {
        if (startDate === null || startDate === undefined) {
            throw new Error('Required parameter startDate was null or undefined when calling analyticsDashboardControllerGetNonInitialPublishedProjectCountByForestClient.');
        }
        if (endDate === null || endDate === undefined) {
            throw new Error('Required parameter endDate was null or undefined when calling analyticsDashboardControllerGetNonInitialPublishedProjectCountByForestClient.');
        }

        let queryParameters = new HttpParams({encoder: this.encoder});
        if (startDate !== undefined && startDate !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>startDate, 'startDate');
        }
        if (endDate !== undefined && endDate !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>endDate, 'endDate');
        }
        if (projectPlanCode !== undefined && projectPlanCode !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>projectPlanCode, 'projectPlanCode');
        }

        let headers = this.defaultHeaders;

        let credential: string | undefined;
        // authentication (bearer) required
        credential = this.configuration.lookupCredential('bearer');
        if (credential) {
            headers = headers.set('Authorization', 'Bearer ' + credential);
        }

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        let responseType: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }

        return this.httpClient.get<Array<ProjectCountByForestClientResponse>>(`${this.configuration.basePath}/api/analytics-dashboard/project/count-by-forest-client`,
            {
                params: queryParameters,
                responseType: <any>responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get the top N most commented projects (FOMs)
     * @param startDate Start date in YYYY-MM-DD format
     * @param endDate End date in YYYY-MM-DD format
     * @param projectPlanCode Project plan code filter (FSP, WOODLOT, ALL). Default to FSP
     * @param limit Maximum number of projects to return (default: 15)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public analyticsDashboardControllerGetTopCommentedProjects(startDate: string, endDate: string, projectPlanCode?: 'FSP' | 'WOODLOT' | 'ALL', limit?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<Array<PublicCommentCountByProjectResponse>>;
    public analyticsDashboardControllerGetTopCommentedProjects(startDate: string, endDate: string, projectPlanCode?: 'FSP' | 'WOODLOT' | 'ALL', limit?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<Array<PublicCommentCountByProjectResponse>>>;
    public analyticsDashboardControllerGetTopCommentedProjects(startDate: string, endDate: string, projectPlanCode?: 'FSP' | 'WOODLOT' | 'ALL', limit?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<Array<PublicCommentCountByProjectResponse>>>;
    public analyticsDashboardControllerGetTopCommentedProjects(startDate: string, endDate: string, projectPlanCode?: 'FSP' | 'WOODLOT' | 'ALL', limit?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {
        if (startDate === null || startDate === undefined) {
            throw new Error('Required parameter startDate was null or undefined when calling analyticsDashboardControllerGetTopCommentedProjects.');
        }
        if (endDate === null || endDate === undefined) {
            throw new Error('Required parameter endDate was null or undefined when calling analyticsDashboardControllerGetTopCommentedProjects.');
        }

        let queryParameters = new HttpParams({encoder: this.encoder});
        if (startDate !== undefined && startDate !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>startDate, 'startDate');
        }
        if (endDate !== undefined && endDate !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>endDate, 'endDate');
        }
        if (projectPlanCode !== undefined && projectPlanCode !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>projectPlanCode, 'projectPlanCode');
        }
        if (limit !== undefined && limit !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>limit, 'limit');
        }

        let headers = this.defaultHeaders;

        let credential: string | undefined;
        // authentication (bearer) required
        credential = this.configuration.lookupCredential('bearer');
        if (credential) {
            headers = headers.set('Authorization', 'Bearer ' + credential);
        }

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        let responseType: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }

        return this.httpClient.get<Array<PublicCommentCountByProjectResponse>>(`${this.configuration.basePath}/api/analytics-dashboard/public-comment/most-commented-projects`,
            {
                params: queryParameters,
                responseType: <any>responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get total number of unique forest clients who published FOMs in a user selected date range
     * @param startDate Start date in YYYY-MM-DD format
     * @param endDate End date in YYYY-MM-DD format
     * @param projectPlanCode Project plan code filter (FSP, WOODLOT, ALL). Default to FSP
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public analyticsDashboardControllerGetUniqueForestClientCount(startDate: string, endDate: string, projectPlanCode?: 'FSP' | 'WOODLOT' | 'ALL', observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<number>;
    public analyticsDashboardControllerGetUniqueForestClientCount(startDate: string, endDate: string, projectPlanCode?: 'FSP' | 'WOODLOT' | 'ALL', observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<number>>;
    public analyticsDashboardControllerGetUniqueForestClientCount(startDate: string, endDate: string, projectPlanCode?: 'FSP' | 'WOODLOT' | 'ALL', observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<number>>;
    public analyticsDashboardControllerGetUniqueForestClientCount(startDate: string, endDate: string, projectPlanCode?: 'FSP' | 'WOODLOT' | 'ALL', observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {
        if (startDate === null || startDate === undefined) {
            throw new Error('Required parameter startDate was null or undefined when calling analyticsDashboardControllerGetUniqueForestClientCount.');
        }
        if (endDate === null || endDate === undefined) {
            throw new Error('Required parameter endDate was null or undefined when calling analyticsDashboardControllerGetUniqueForestClientCount.');
        }

        let queryParameters = new HttpParams({encoder: this.encoder});
        if (startDate !== undefined && startDate !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>startDate, 'startDate');
        }
        if (endDate !== undefined && endDate !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>endDate, 'endDate');
        }
        if (projectPlanCode !== undefined && projectPlanCode !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>projectPlanCode, 'projectPlanCode');
        }

        let headers = this.defaultHeaders;

        let credential: string | undefined;
        // authentication (bearer) required
        credential = this.configuration.lookupCredential('bearer');
        if (credential) {
            headers = headers.set('Authorization', 'Bearer ' + credential);
        }

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        let responseType: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }

        return this.httpClient.get<number>(`${this.configuration.basePath}/api/analytics-dashboard/project/count-forest-client`,
            {
                params: queryParameters,
                responseType: <any>responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
