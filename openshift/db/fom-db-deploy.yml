apiVersion: v1
kind: Template
labels:
  app.kubernetes.io/part-of: fom
  template: fom-db-deploy
  # Need prefix for suffix in case it starts with a dash or is empty. Label values aren't allowed to start with a dash.
  suffix: fom${SUFFIX}
  app-component: ${NAME}
metadata:
  name: fom-db-deploy
parameters:
  # Mandatory parameters
  - description: Suffix specifying the release/build/environment. Can be blank (for production). 
    displayName: Suffix
    name: SUFFIX
    required: true
  - description: Version of PostgreSQL image to be used.
    displayName: Version of PostgreSQL Image
    name: IMAGE_STREAM_VERSION
    required: true
  - name: BACKUP_VOLUME_NAME
    displayName: Backup Volume Name
    description: The name of the persistent volume used to store the backups.
    required: true
  # Optional parameters with defaults
  - description: Volume space available for data, e.g. 512Mi, 2Gi.
    displayName: Volume Capacity
    name: VOLUME_CAPACITY
    required: true
    value: 1Gi
  - name: BACKUP_VOLUME_SIZE
    displayName: Backup Volume Size
    description: The size of the persistent volume used to store the backups, e.g. 512Mi, 1Gi, 2Gi.  Ensure this is sized correctly.  Refer to the container documentation for details.
    required: true
    value: 5Gi
  - description: Request for CPU resources measured in cpu units, e.g. 200m
    displayName: CPU resource request
    name: REQUEST_CPU
    required: false
    value: 100m
  - description: Request for memory resources measured in bytes, e.g. 512Mi, 1Gi.
    displayName: Memory resource request
    name: REQUEST_MEMORY
    required: false
    value: 512Mi
  - description: Limit for CPU resources measured in cpu units, e.g. 200m
    displayName: CPU resource limit
    name: LIMIT_CPU
    required: false
    value: 200m
  - description: Limit for memory resources measured in bytes, e.g. 512Mi, 1Gi.
    displayName: Memory resource limit
    name: LIMIT_MEMORY
    required: false
    value: 1Gi
  # Hardcoded parameters - no need to change.
  - description: Name of the application component being deployed.
    displayName: Name
    name: NAME
    value: fom-db
  - description: Name of the PostgreSQL database accessed.
    displayName: PostgreSQL Database Name
    name: POSTGRESQL_DATABASE
    value: fom
  - description: PostgreSQL database port
    displayName: PostgreSQL Database Port
    name: POSTGRESQL_PORT
    value: '5432'
  - description: Username for PostgreSQL user that will be used for accessing the database.
    displayName: PostgreSQL Connection Username
    name: POSTGRESQL_USER
    # User needs to be this value to avoid runtime errors in the log, seems linked to running as any user within openshift.
    value: postgres
    required: true
  - description: Password for the PostgreSQL connection user.
    displayName: PostgreSQL Connection Password
    from: "[a-zA-Z0-9]{16}"
    generate: expression
    name: POSTGRESQL_PASSWORD
    required: true
  - description: DB Data Storage class.
    displayName: DB Data Storage class.
    name: DATA_STORAGE_CLASS
    value: netapp-block-standard
  - name: BACKUP_STORAGE_CLASS
    displayName: Backup Storage Class
    description: The storage class of the persistent volume claim used to store the backups.
    value: netapp-file-backup
objects:
  - kind: ImageStream
    apiVersion: v1
    metadata:
      name: ${NAME}
    spec:
      lookupPolicy:
        # Set to true to allow local image name resolution, without having to specify the internal OpenShift image registry and port.
        local: true
    # SECRET - db/user/pwd
  - kind: Secret
    apiVersion: v1
    metadata:
      annotations:
        as-copy-of: '${NAME}-template'
        create-template: 'true'
      name: ${NAME}${SUFFIX}
    stringData:
      # The unqualified hostname is the name of the db service. Easier to look up in fom-api-deploy than recreate.
      database-host: ${NAME}${SUFFIX}
      database-name: ${POSTGRESQL_DATABASE}
      database-password: ${POSTGRESQL_PASSWORD}
      database-user: ${POSTGRESQL_USER}
    # Service - DB
  - kind: Service
    apiVersion: v1
    metadata:
      name: ${NAME}${SUFFIX}
    spec:
      ports:
        - name: postgresql
          port: ${{POSTGRESQL_PORT}}
          protocol: TCP
          targetPort: ${{POSTGRESQL_PORT}}
      selector:
        name: ${NAME}${SUFFIX}
      sessionAffinity: None
      type: ClusterIP
    # Persistent Storage - DB
  - kind: PersistentVolumeClaim
    apiVersion: v1
    metadata:
      name: ${NAME}${SUFFIX}
      annotations:
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: ${VOLUME_CAPACITY}
      storageClassName: ${DATA_STORAGE_CLASS}
    # Persistent Storage - Backup Volume
  - kind: PersistentVolumeClaim
    apiVersion: v1
    metadata:
      name: ${BACKUP_VOLUME_NAME}
    spec:
      storageClassName: ${BACKUP_STORAGE_CLASS}
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: ${BACKUP_VOLUME_SIZE}
    # DeploymentConfig - DB 
  - kind: DeploymentConfig
    apiVersion: v1
    metadata:
      annotations:
        template.alpha.openshift.io/wait-for-ready: "true"
      name: ${NAME}${SUFFIX}
    spec:
      replicas: 1
      selector:
        name: ${NAME}${SUFFIX}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:           
            name: ${NAME}${SUFFIX}
            backup: "true"
        spec:
          containers:
            - capabilities: {}
              env:
                - name: POSTGRES_USER
                  valueFrom:
                    secretKeyRef:
                      key: database-user
                      name: ${NAME}${SUFFIX}
                - name: POSTGRES_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: database-password
                      name: ${NAME}${SUFFIX}
                - name: POSTGRES_DB
                  valueFrom:
                    secretKeyRef:
                      key: database-name
                      name: ${NAME}${SUFFIX}
                - name: POSTGRES_PORT
                  value: '${POSTGRESQL_PORT}'
                - name: PGDATA
                  # Documentation recommends using subdirectory of mount.
                  value: /var/lib/postgresql/data/pgdata
              image: " "
              imagePullPolicy: Always
              livenessProbe:
                failureThreshold: 3
                initialDelaySeconds: 30
                periodSeconds: 10
                successThreshold: 1
                tcpSocket:
                  port: ${{POSTGRESQL_PORT}}
                timeoutSeconds: 1
              name: postgresql
              ports:
                - containerPort: ${{POSTGRESQL_PORT}}
                  protocol: TCP
              readinessProbe:
                exec:
                  command:
                    - bash
                    - '-c'
                    - >-
                      psql -q --dbname "$POSTGRES_DB" --username "$POSTGRES_USER" -c 'SELECT 1'
                failureThreshold: 5
                initialDelaySeconds: 30
                periodSeconds: 15
                successThreshold: 1
                timeoutSeconds: 1
              resources:
                requests:
                  cpu: ${REQUEST_CPU}
                  memory: ${REQUEST_MEMORY}
                limits:
                  cpu: ${LIMIT_CPU}
                  memory: ${LIMIT_MEMORY}
              securityContext:
                capabilities: {}
                privileged: false
              terminationMessagePath: /dev/termination-log
              volumeMounts:
                - mountPath: /var/lib/postgresql/data
                  name: db-data
                - mountPath: /var/run/postgresql
                  name: db-run
                - mountPath: /var/backups/
                  name: backups
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          volumes:
            - name: db-data
              persistentVolumeClaim:
                claimName: ${NAME}${SUFFIX}
            - name: backups
              persistentVolumeClaim:
                claimName: ${BACKUP_VOLUME_NAME}
            - name: db-run
              emptyDir: {}
      triggers: 
        - type: ImageChange
          imageChangeParams:
            automatic: true
            containerNames:
              - postgresql
            from:
              kind: ImageStreamTag
              name: ${NAME}:${IMAGE_STREAM_VERSION}
        - type: ConfigChange
