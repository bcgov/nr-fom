apiVersion: v1
kind: Template
labels:
  template: fom-api-deploy
  app: fom
  app-component: ${NAME}
  # Need prefix for suffix in case it starts with a dash or is empty. Label values aren't allowed to start with a dash.
  suffix: fom${SUFFIX}
  app.kubernetes.io/part-of: fom
metadata:
  name: fom-api-deploy
parameters:
  - description: Environment corresponding to namespace (dev/test/prod).
    displayName: Environment
    name: ENV
    value: dev
  - description: OpenShift Project (namespace prefix).
    displayName: Project
    name: PROJECT
    value: a4b31c
  - description: Name of the application component being deployed.
    displayName: Name
    name: NAME
    value: fom-api
  - description: Name of the database component used by the API.
    displayName: Database Name
    name: DB_NAME
    value: fom-db
  - description: Suffix specifying the release/build/environment. Can be blank. Example '-working-dev'
    displayName: Suffix
    name: SUFFIX
    value: -main-dev
  - description: Port number
    displayName: Port number
    name: PORT
    value: '3333'
  - description: Service port name (referenced by route).
    displayName: Service port name
    name: SERVICE_PORT_NAME
    value: http
  - description: Request for CPU resources measured in cpu units, e.g. 200m
    displayName: CPU resource request
    name: REQUEST_CPU
    required: false
    value: 50m
  - description: Request for memory resources measured in bytes, e.g. 512Mi, 1Gi.
    displayName: Memory resource request
    name: REQUEST_MEMORY
    required: false
    value: 50Mi
  - description: Limit for CPU resources measured in cpu units, e.g. 200m
    displayName: CPU resource limit
    name: LIMIT_CPU
    required: false
    value: 200m
  - description: Limit for memory resources measured in bytes, e.g. 512Mi, 1Gi.
    displayName: Memory resource limit
    name: LIMIT_MEMORY
    required: false
    value: 1Gi
  - description: Number of replicas
    displayName: Replica Count
    name: REPLICA_COUNT
    required: false
    value: '2'
  - description: DNS Hostname for the public route. For dev should default to nr-fom-${NAME}${SUFFIX} where SUFFIX includes the environment (dev). Note - can't use other parameters in default value.
    displayName: DNS Hostname
    name: HOSTNAME
    required: true
  - description: API Image Version to use
    displayName: API Image Version
    name: IMAGE_STREAM_VERSION
    required: true
    value: main
  - description: Specify 'true' to populate test data (run test migrations) at startup.
    displayName: Database Test Data
    name: DB_TESTDATA
    value: 'false'
  - description: URL of Keycloak Server to use for authentication.
    displayName: Keycloak Server URL
    name: KEYCLOAK_URL
    value: 'https://dev.oidc.gov.bc.ca/auth'
  - description: Whether use of Keycloak is enabled. 
    displayName: Keycloak Enabled
    name: KEYCLOAK_ENABLED
    value: 'true'
  - description: Secret key for data encryption within database
    displayName: Data encryption key
    name: DATA_ENCRYPTION_KEY
    from: "[a-zA-Z0-9]{16}"
    generate: expression

objects:
  - kind: ImageStream
    apiVersion: v1
    metadata:
      name: ${NAME}
    spec:
      lookupPolicy:
        local: false
    # TODO: Not used anymore.
    # ConfigMap - Hostname - for lookup by Admin/Public
  - kind: ConfigMap
    apiVersion: v1
    data: 
      hostname: ${HOSTNAME}
      # Store this in config map to allow it to be changed.
      keycloak-url: ${KEYCLOAK_URL}
    metadata:
      name: ${NAME}${SUFFIX}

    # SECRET - data encryption key
  - kind: Secret
    apiVersion: v1
    metadata:
      annotations:
      name: ${NAME}${SUFFIX}
    stringData:
      data-encryption-key: ${DATA_ENCRYPTION_KEY}

  ### DeploymentConfig
  - kind: DeploymentConfig
    apiVersion: apps.openshift.io/v1
    metadata:
      name: ${NAME}${SUFFIX}
    spec:
      replicas: ${{REPLICA_COUNT}}
      revisionHistoryLimit: 10
      test: false
      strategy:
        type: Rolling
        rollingParams:
          # Delay pod updates to account for time to run migrations
          updatePeriodSeconds: 30
          intervalSeconds: 1
          timeoutSeconds: 600
          maxUnavailable: 25%
          maxSurge: 25%
      selector:
        deploymentconfig: ${NAME}${SUFFIX}
      triggers:
        - type: ImageChange
          imageChangeParams:
            automatic: true
            containerNames:
              - app
            from:
              kind: ImageStreamTag
              name: ${NAME}:${IMAGE_STREAM_VERSION}
        - type: ConfigChange
      template:
        metadata:
          creationTimestamp: null
          labels:
            deploymentconfig: ${NAME}${SUFFIX}
        spec:
          containers:
            - name: app
              # Supply a space to image:, will use settings in ImageChange trigger.
              image: " "  
              env:
                - name: DB_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: database-password
                      name: ${DB_NAME}${SUFFIX}
                - name: DB_USERNAME 
                  valueFrom:
                    secretKeyRef:
                      key: database-user
                      name: ${DB_NAME}${SUFFIX}
                - name: DB_NAME
                  valueFrom:
                      secretKeyRef:
                        key: database-name
                        name: ${DB_NAME}${SUFFIX}
                - name: DB_HOST
                  valueFrom:
                      secretKeyRef:
                        key: database-host
                        name: ${DB_NAME}${SUFFIX}
                - name: DATA_ENCRYPTION_KEY
                  valueFrom:
                    secretKeyRef:
                      key: data-encryption-key
                      name: ${NAME}${SUFFIX}
                - name: DB_TESTDATA
                  value: ${DB_TESTDATA}
                # This is the application port
                - name: PORT
                  value: '${PORT}'
                - name: KEYCLOAK_ENABLED
                  value: ${KEYCLOAK_ENABLED}
                - name: KEYCLOAK_URL
                  valueFrom:
                    configMapKeyRef:
                      key: keycloak-url
                      name: ${NAME}${SUFFIX}
              resources:
                requests:
                  cpu: ${REQUEST_CPU}
                  memory: ${REQUEST_MEMORY}
                limits:
                  cpu: ${LIMIT_CPU}
                  memory: ${LIMIT_MEMORY}
              # Have longer delay at startup to allow for database migrations to take place.
              startupProbe:
                httpGet:
                  path: /api
                  port: ${{PORT}}
                  scheme: HTTP
                initialDelaySeconds: 30
                timeoutSeconds: 30
                periodSeconds: 15
                successThreshold: 1
                failureThreshold: 30
              # Don't need a liveness probe because node is executed as the root (only) process in the container, if it crashes the container will get restarted.
              readinessProbe:
                httpGet:
                  path: /api
                  port: ${{PORT}}
                  scheme: HTTP
                timeoutSeconds: 15
                periodSeconds: 15
                successThreshold: 1
                failureThreshold: 3
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
              imagePullPolicy: Always
          restartPolicy: Always
          terminationGracePeriodSeconds: 30
          dnsPolicy: ClusterFirst
          securityContext: {}
  ### Service
  - kind: Service
    apiVersion: v1
    metadata:
      name: ${NAME}${SUFFIX}
    spec:
      ports:
        - name: ${SERVICE_PORT_NAME}
          protocol: TCP
          port: ${{PORT}}
          targetPort: ${{PORT}}
      selector:
        deploymentconfig: ${NAME}${SUFFIX}
      type: ClusterIP
      sessionAffinity: None
  ### Route
  - kind: Route
    apiVersion: v1
    metadata:
      name: ${NAME}${SUFFIX}
      annotations: 
        haproxy.router.openshift.io/rate-limit-connections: "true"
        # Number of HTTP requests that a client IP can make in a 3-second period
        # Needs to be high enough to handle normal case of concurrent requests from Admin at startup.
        haproxy.router.openshift.io/rate-limit-connections.rate-http: "20"
        # Performance testing for BCGW extract and public map needs longer timeout.
        haproxy.router.openshift.io/timeout: "120s"
    spec:
      host: ${HOSTNAME}
      path: /api
      to:
        kind: Service
        name: ${NAME}${SUFFIX}
        weight: 100
      port:
        targetPort: ${SERVICE_PORT_NAME}
      tls:
        termination: edge
        insecureEdgeTerminationPolicy: Redirect
      wildcardPolicy: None
  ### Network Policy - External Web Traffic
  - kind: NetworkPolicy
    apiVersion: networking.k8s.io/v1
    metadata:
      name: web-allow-external-${NAME}${SUFFIX}
    spec:
      podSelector:
        matchLabels:
          deploymentconfig: ${NAME}${SUFFIX}
      ingress:
        - {}
  ### Network Policy - App to DB Traffic
  - kind: NetworkPolicy
    apiVersion: networking.k8s.io/v1
    metadata:
      name: app-to-db-allow-${NAME}${SUFFIX}
    spec:
      podSelector:
        matchLabels:
          deploymentconfig: ${DB_NAME}${SUFFIX}
      ingress:
        - from:
            - podSelector:
                matchLabels:
                  deploymentconfig: ${NAME}${SUFFIX}
          ports:
            - protocol: TCP
              port: 5432
