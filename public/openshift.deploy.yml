apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: ${NAME}
  annotations:
    description: "Forest Operations Map"
    tags: "fom"
    iconClass: icon-js
labels:
  app: ${NAME}-${ZONE}
  app.kubernetes.io/part-of: ${NAME}-${ZONE}
parameters:
  - name: NAME
    description: Module name
    value: fom
  - name: COMPONENT
    description: Component name
    value: public
  - name: ZONE
    description: Deployment zone, e.g. pr-### or prod
    required: true
  - name: URL
    description: Deployment URL, e.g. fom-123.apps.silver.devops.gov.bc.ca or fom.nrs.gov.bc.ca
    required: true
  - name: CPU_REQUEST
    value: 20m
  - name: MEMORY_REQUEST
    value: 50Mi
  - name: REGISTRY
    description: Container registry to import from (internal is image-registry.openshift-image-registry.svc:5000)
    value: ghcr.io
  - name: PROMOTE
    description: Image (namespace/name:tag) to promote/import
    required: true
  - description: Number of replicas
    displayName: Replica Count
    name: REPLICA_COUNT
    required: false
    value: "3"
  - description: Volume space available for data.
    displayName: Caddy /data Volume Capacity
    name: CADDY_DATA_PVC_SIZE
    required: true
    value: 22Mi
objects:
  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        app: ${NAME}-${ZONE}
      name: ${NAME}-${ZONE}-${COMPONENT}
    spec:
      lookupPolicy:
        local: false
      tags:
        - name: ${ZONE}-${COMPONENT}
          from:
            kind: DockerImage
            name: ${REGISTRY}/${PROMOTE}
          referencePolicy:
            type: Local
  - kind: ConfigMap
    apiVersion: v1
    data:
      env.js: |-
        window.localStorage.setItem('fom_environment_name', '${ZONE}');
        window.localStorage.setItem('fom_api_base_url', 'https://${URL}');
    metadata:
      name: ${NAME}-${ZONE}-${COMPONENT}
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        app: ${NAME}-${ZONE}
      name: ${NAME}-${ZONE}-${COMPONENT}
    spec:
      replicas: ${{REPLICA_COUNT}}
      revisionHistoryLimit: 10
      test: false
      strategy:
        type: Rolling
        rollingParams:
          updatePeriodSeconds: 1
          intervalSeconds: 1
          timeoutSeconds: 600
          maxUnavailable: 25%
          maxSurge: 25%
      activeDeadlineSeconds: 21600
      triggers:
        - type: ConfigChange
        - type: ImageChange
          imageChangeParams:
            automatic: true
            containerNames:
              - ${NAME}
            from:
              kind: ImageStreamTag
              name: ${NAME}-${ZONE}-${COMPONENT}:${ZONE}-${COMPONENT}
      selector:
        deploymentconfig: ${NAME}-${ZONE}-${COMPONENT}
      template:
        metadata:
          labels:
            app: ${NAME}-${ZONE}
            deploymentconfig: ${NAME}-${ZONE}-${COMPONENT}
        spec:
          containers:
            - image: ${NAME}-${ZONE}-${COMPONENT}:${ZONE}-${COMPONENT}
              securityContext:
                capabilities:
                  add: ["NET_BIND_SERVICE"]
              imagePullPolicy: Always
              name: ${NAME}
              env:
                - name: API_BASE_URL
                  value: fom-${ZONE}-api
                - name: fom_api_base_url
                  value: fom-${ZONE}-api
              ports:
                - containerPort: 4300
                  protocol: TCP
              resources:
                requests:
                  cpu: ${CPU_REQUEST}
                  memory: ${MEMORY_REQUEST}
              readinessProbe:
                httpGet:
                  path: /${COMPONENT}
                  port: 4300
                  scheme: HTTP
                initialDelaySeconds: 15
                periodSeconds: 15
                timeoutSeconds: 1
              livenessProbe:
                successThreshold: 1
                failureThreshold: 3
                httpGet:
                  path: /${COMPONENT}
                  port: 4300
                  scheme: HTTP
                initialDelaySeconds: 15
                periodSeconds: 30
                timeoutSeconds: 5
              volumeMounts:
                - mountPath: /dist/assets/env
                  name: env-config
                - mountPath: /data
                  name: caddy-data
                - mountPath: /config
                  name: caddy-config
          volumes:
            - name: env-config
              configMap:
                name: ${NAME}-${ZONE}-${COMPONENT}
            - name: caddy-data
              persistentVolumeClaim:
                claimName: ${NAME}-${ZONE}-${COMPONENT}-caddy-data
            - name: caddy-config
              emptyDir: {}
  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: ${NAME}-${ZONE}
      name: ${NAME}-${ZONE}-${COMPONENT}
    spec:
      ports:
        - name: 4300-tcp
          protocol: TCP
          port: 80
          targetPort: 4300
      selector:
        deploymentconfig: ${NAME}-${ZONE}-${COMPONENT}
  - apiVersion: route.openshift.io/v1
    kind: Route
    metadata:
      labels:
        app: ${NAME}-${ZONE}
      name: ${NAME}-${ZONE}-${COMPONENT}
    spec:
      host: ${URL}
      path: /${COMPONENT}
      port:
        targetPort: 4300-tcp
      to:
        kind: Service
        name: ${NAME}-${ZONE}-${COMPONENT}
        weight: 100
      tls:
        termination: edge
        insecureEdgeTerminationPolicy: Redirect
  - kind: PersistentVolumeClaim
    apiVersion: v1
    metadata:
      name: ${NAME}-${ZONE}-${COMPONENT}-caddy-data
      labels:
        app: ${NAME}-${ZONE}
    spec:
      accessModes:
        - ReadWriteMany
      resources:
        requests:
          storage: "${CADDY_DATA_PVC_SIZE}"
      storageClassName: netapp-file-standard
