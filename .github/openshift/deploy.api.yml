apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: ${NAME}
  annotations:
    description: "Forest Operations Map"
    tags: "fom"
    iconClass: icon-js
labels:
  app: ${NAME}-${ZONE}
  app.kubernetes.io/part-of: ${NAME}-${ZONE}
parameters:
  - name: NAME
    description: Module name
    value: fom
  - name: COMPONENT
    description: Component name
    value: api
  - name: ZONE
    description: Deployment zone, e.g. pr-### or prod
    required: true
    # https://bugzilla.redhat.com/show_bug.cgi?id=2000216
  - name: NAMESPACE
    description: Current namespace (required for image pull bug)
    required: true
  - description: Environment corresponding to namespace (dev/test/prod)
    displayName: Environment
    name: ENV
    value: dev
  - name: PORT
    value: "3333"
  - name: DB_TESTDATA
    description: Whether to load test data
    value: "false"
  - description: SMTP Server URL for sending emails
    displayName: SMTP Server URL
    name: SMTP_SERVER
    value: "smtp://apps.smtp.gov.bc.ca/?port=25&ignoreTLS=true&secure=false"
  - description: URL of Keycloak Server to use for authentication.
    displayName: Keycloak Server URL
    name: KEYCLOAK_URL
    value: "https://dev.oidc.gov.bc.ca/auth"
  - description: URL of SiteMinder Server used for logout (with BCeID)
    displayName: SiteMinder Server URL
    name: SITEMINDER_URL
    value: "https://logontest7.gov.bc.ca"
  - description: URL of Object Storage Service
    displayName: Object Storage URL
    name: OBJECT_STORAGE_URL
    value: "nrs.objectstore.gov.bc.ca"
  - name: DOMAIN
    value: apps.silver.devops.gov.bc.ca
  - name: CERTBOT
    description: Is certbot handling these certs [true/false]?
    value: "true"
  - name: CPU_REQUEST
    value: 100m
  - name: MEMORY_REQUEST
    value: 0.5Gi
  - name: REGISTRY
    description: Container registry to import from (internal is image-registry.openshift-image-registry.svc:5000)
    value: ghcr.io
  - name: PROMOTE
    description: Image (namespace/name:tag) to promote/import
    required: true
  - name: CRON_MINUTES
    description: Random number, 0-60, for scheduling cronjobs
    from: "[0-5]{1}[0-9]{1}"
    generate: expression
  - description: Number of replicas
    displayName: Replica Count
    name: REPLICA_COUNT
    required: false
    value: '2'
objects:
  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        app: ${NAME}-${ZONE}
      name: ${NAME}-${ZONE}-${COMPONENT}
    spec:
      lookupPolicy:
        local: false
      tags:
        - name: ${ZONE}-api
          from:
            kind: DockerImage
            name: ${REGISTRY}/${PROMOTE}
          referencePolicy:
            type: Local
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        app: ${NAME}-${ZONE}
      name: ${NAME}-${ZONE}-${COMPONENT}
    spec:
      replicas: ${{REPLICA_COUNT}}
      revisionHistoryLimit: 10
      test: false
      strategy:
        type: Rolling
        rollingParams:
          # Delay pod updates to account for time to run migrations
          updatePeriodSeconds: 30
          intervalSeconds: 1
          timeoutSeconds: 600
          maxUnavailable: 25%
          maxSurge: 25%
      triggers:
        - type: ConfigChange
        - type: ImageChange
          imageChangeParams:
            automatic: true
            containerNames:
              - ${NAME}
            from:
              kind: ImageStreamTag
              name: ${NAME}-${ZONE}-${COMPONENT}:${ZONE}-api
      selector:
        deploymentconfig: ${NAME}-${ZONE}-${COMPONENT}
      strategy:
        type: Rolling
      template:
        metadata:
          labels:
            app: ${NAME}-${ZONE}
            deploymentconfig: ${NAME}-${ZONE}-${COMPONENT}
        spec:
          containers:
            - image: ${NAME}-${ZONE}-${COMPONENT}:${ZONE}-api
              imagePullPolicy: Always
              name: ${NAME}
              env:
                - name: BYPASS_CORS
                  value: "false"
                - name: DB_HOST
                  value: ${NAME}-${ZONE}-db
                - name: DB_TESTDATA
                  value: ${DB_TESTDATA}
                - name: DB_NAME
                  valueFrom:
                    secretKeyRef:
                      key: database-db
                      name: ${NAME}-${ZONE}-db
                - name: DB_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: database-password
                      name: ${NAME}-${ZONE}-db
                - name: DB_USERNAME
                  valueFrom:
                    secretKeyRef:
                      key: database-user
                      name: ${NAME}-${ZONE}-db
                - name: ENV
                  value: ${ENV}
                - name: HOSTNAME
                  value: ${NAME}-${ZONE}.${DOMAIN}/${COMPONENT}
                - name: PORT
                  value: "${PORT}"
                - name: KEYCLOAK_ENABLED
                  value: "true"
                - name: KEYCLOAK_URL
                  value: ${KEYCLOAK_URL}
                - name: SITEMINDER_URL
                  value: ${SITEMINDER_URL}
                - name: SMTP_SERVER
                  value: ${SMTP_SERVER}
                - name: OBJECT_STORAGE_ACCESS_ID
                  valueFrom:
                    secretKeyRef:
                      key: access_id
                      name: fom-object-storage
                - name: OBJECT_STORAGE_BUCKET
                  valueFrom:
                    secretKeyRef:
                      key: bucket
                      name: fom-object-storage
                - name: OBJECT_STORAGE_SECRET
                  valueFrom:
                    secretKeyRef:
                      key: secret
                      name: fom-object-storage
                - name: OBJECT_STORAGE_URL
                  value: ${OBJECT_STORAGE_URL}
              ports:
                - containerPort: ${{PORT}}
                  protocol: TCP
              resources:
                requests:
                  cpu: ${CPU_REQUEST}
                  memory: ${MEMORY_REQUEST}
              startupProbe:
                httpGet:
                  path: /health-check
                  port: ${{PORT}}
                  scheme: HTTP
                initialDelaySeconds: 30
                timeoutSeconds: 30
                periodSeconds: 15
                successThreshold: 1
                failureThreshold: 30
              readinessProbe:
                httpGet:
                  path: /api/
                  port: ${{PORT}}
                  scheme: HTTP
                initialDelaySeconds: 15
                periodSeconds: 15
                timeoutSeconds: 1
              livenessProbe:
                successThreshold: 1
                failureThreshold: 3
                httpGet:
                  path: /api/
                  port: ${{PORT}}
                  scheme: HTTP
                initialDelaySeconds: 15
                periodSeconds: 30
                timeoutSeconds: 5
  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: ${NAME}-${ZONE}
      name: ${NAME}-${ZONE}-${COMPONENT}
    spec:
      ports:
        - name: ${PORT}-tcp
          protocol: TCP
          port: 80
          targetPort: ${{PORT}}
      selector:
        deploymentconfig: ${NAME}-${ZONE}-${COMPONENT}
  - apiVersion: route.openshift.io/v1
    kind: Route
    metadata:
      labels:
        app: ${NAME}-${ZONE}
        certbot-managed: ${CERTBOT}
      name: ${NAME}-${ZONE}-${COMPONENT}
    spec:
      host: ${NAME}-${ZONE}.${DOMAIN}
      path: /${COMPONENT}
      port:
        targetPort: ${PORT}-tcp
      to:
        kind: Service
        name: ${NAME}-${ZONE}-${COMPONENT}
        weight: 100
      tls:
        termination: edge
        insecureEdgeTerminationPolicy: Redirect
  - kind: CronJob
    apiVersion: batch/v1
    metadata:
      labels:
        app: ${NAME}-${ZONE}
      name: ${NAME}-${ZONE}-batch
    spec:
      concurrencyPolicy: Replace
      schedule: "${CRON_MINUTES} 9 * * * " # Run daily at 9:xx AM UTC
      jobTemplate:
        spec:
          template:
            metadata:
              labels:
                app: ${NAME}-${ZONE}
                cronjob: ${NAME}-${ZONE}-batch
            spec:
              restartPolicy: OnFailure
              containers:
                - name: ${NAME}-batch
                  # Full image name required due to bug https://bugzilla.redhat.com/show_bug.cgi?id=2000216
                  image: image-registry.openshift-image-registry.svc:5000/${NAMESPACE}/${NAME}-${ZONE}-${COMPONENT}:${ZONE}-api
                  imagePullPolicy: Always
                  args: ["-batch"]
                  env:
                    - name: DB_HOST
                      value: ${NAME}-${ZONE}-db
                    - name: DB_NAME
                      valueFrom:
                        secretKeyRef:
                          key: database-db
                          name: ${NAME}-${ZONE}-db
                    - name: DB_PASSWORD
                      valueFrom:
                        secretKeyRef:
                          key: database-password
                          name: ${NAME}-${ZONE}-db
                    - name: DB_USERNAME
                      valueFrom:
                        secretKeyRef:
                          key: database-user
                          name: ${NAME}-${ZONE}-db
                    - name: OBJECT_STORAGE_ACCESS_ID
                      valueFrom:
                        secretKeyRef:
                          key: access_id
                          name: fom-object-storage-${ENV}
                    - name: OBJECT_STORAGE_BUCKET
                      valueFrom:
                        secretKeyRef:
                          key: bucket
                          name: fom-object-storage-${ENV}
                    - name: OBJECT_STORAGE_SECRET
                      valueFrom:
                        secretKeyRef:
                          key: secret
                          name: fom-object-storage-${ENV}
                    - name: OBJECT_STORAGE_URL
                      value: ${OBJECT_STORAGE_URL}
                  resources:
                    requests:
                      cpu: ${CPU_REQUEST}
                      memory: ${MEMORY_REQUEST}
