name: Pull Request Open

on:
  pull_request:

env:
  REGISTRY: ghcr.io
  NAME: fom

concurrency:
  group: pr-${{ github.ref }}
  cancel-in-progress: true

jobs:
  pr-greeting:
    name: PR Greeting
    env:
      DOMAIN: apps.silver.devops.gov.bc.ca
      PREFIX: ${{ github.event.repository.name }}-${{ github.event.number }}
    runs-on: ubuntu-22.04
    permissions:
      pull-requests: write
    steps:
      - name: PR Greeting
        uses: bcgov-nr/action-pr-description-add@v0.0.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          add_markdown: |
            ---
            Thanks for the PR!

            Any successful deployments (not always required) will be available below.
             - [api](https://${{ env.NAME }}-${{ github.event.number }}.${{ env.DOMAIN }}/api)
             - [admin](https://${{ env.NAME }}-${{ github.event.number }}.${{ env.DOMAIN }}/admin)
             - [public](https://${{ env.NAME }}-${{ github.event.number }}.${{ env.DOMAIN }}/public)

            Once merged, code will be promoted and handed off to following workflow run.
             - [Main Merge Workflow](https://github.com/${{ github.repository }}/actions/workflows/merge-main.yml)

  builds:
    name: Builds
    runs-on: ubuntu-22.04
    permissions:
      packages: write
    strategy:
      matrix:
        package: [admin, api, db, public]
        include:
          - package: admin
            build_context: ./
            build_file: admin/Dockerfile
            triggers: ('admin/', 'libs/')
          - package: api
            build_context: ./
            build_file: api/Dockerfile
            triggers: ('api/')
          - package: db
            triggers: ('db')
          - package: public
            build_context: ./
            build_file: public/Dockerfile
            triggers: ('public/', 'libs/')
    steps:
      - uses: actions/checkout@v3
      - uses: bcgov-nr/action-builder-ghcr@main
        with:
          package: ${{ matrix.package }}
          build_context: ${{ matrix.build_context }}
          build_file: ${{ matrix.build_file }}
          tag: ${{ github.event.number }}
          tag_fallback: test
          token: ${{ secrets.GITHUB_TOKEN }}
          triggers: ${{ matrix.triggers }}

  tests-api:
    name: API Unit Tests
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Get npm cache directory
        id: npm-cache-dir
        run: |
          echo "::set-output name=dir::$(npm config get cache)"
      - uses: actions/cache@v3
        id: npm-cache-api # use this to check for `cache-hit` ==> if: steps.npm-cache.outputs.cache-hit != 'true'
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Cache for test results
        id: cache-api
        uses: actions/cache@v3
        with:
          path: coverage
          key: coverage-api-${{ github.run_number }}
          restore-keys: |
            coverage-api-

      - name: Tests
        run: |
          cd api
          npm ci
          npm run test-unit
      - name: Report code coverage
        uses: romeovs/lcov-reporter-action@v0.3.1
        with:
          title: API coverage report
          delete-old-comments: true
          github-token: ${{ secrets.GITHUB_TOKEN }}
          lcov-file: ./coverage/api/lcov.info

  sonarcloud:
    name: Static Analysis
    needs:
      - builds
      - tests-api
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
        # Disable shallow clone for SonarCloud analysis
        with:
          fetch-depth: 0

      - name: Cache for api test results
        id: cache-backend
        uses: actions/cache@v3
        with:
          path: coverage
          key: coverage-api-${{ github.run_number }}
          restore-keys: |
            coverage-api-

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.exclusions=**/test/**/*,.github/**/*,**/migrations/**/*
            -Dsonar.javascript.lcov.reportPaths=coverage/api/lcov.info
            -Dsonar.organization=bcgov-sonarcloud
            -Dsonar.project.monorepo.enabled=true
            -Dsonar.projectKey=nr-fom

  deploy-dev:
    name: DEV Deployment
    timeout-minutes: 10
    needs:
      - builds
      - tests-api
    runs-on: ubuntu-22.04
    env:
      IMG: ${{ github.repository }}:${{ github.event.number }}
      URL: fom-${{ github.event.number }}.apps.silver.devops.gov.bc.ca
      ZONE: ${{ github.event.number }}
    steps:
      - uses: actions/checkout@v3
      - name: Deploy
        run: |
          # Login to OpenShift and select project
          oc login --token=${{ secrets.OC_TOKEN }} --server=${{ secrets.OC_SERVER }}
          oc project ${{ secrets.OC_NAMESPACE }}

          # Init database secret, only if necessary
          oc process -f .github/openshift/init.database.yml -p ZONE=${{ env.ZONE }} \
            | oc create -f - || \
            echo "Database secret already initialized"

          # Init database backups cronjob, only if necessary
          oc process -f .github/openshift/deploy.backups.yml -p ZONE=${{ env.ZONE }} \
            -p IMAGE_NAMESPACE=${{ secrets.OC_NAMESPACE }} \
            | oc create -f - || \
            echo "Database backup cronjob already initialized"

          # Init API data encryption key, only if necessary
          oc process -f .github/openshift/init.api.yml -p ZONE=${{ env.ZONE }} \
            | oc create -f - || \
            echo "API secret already initialized"

          # Process and apply deployment templates
          oc process -f .github/openshift/deploy.database.yml -p ZONE=${{ env.ZONE }} -p PROMOTE=${{ env.IMG }}-db \
            | oc create -f - || \
            echo "Database already deployed"

          oc process -f .github/openshift/deploy.api.yml -p ZONE=${{ env.ZONE }} -p PROMOTE=${{ env.IMG }}-api \
            -p FOM_EMAIL_NOTIFY=SIBIFSAF@victoria1.gov.bc.ca \
            -p URL=${{ env.URL }} -p CERTBOT=false -p REPLICA_COUNT=1 \
            -p NAMESPACE=${{ secrets.OC_NAMESPACE }} -p DB_TESTDATA=true \
            -p SITEMINDER_URL="https://logontest7.gov.bc.ca" -p KEYCLOAK_URL="https://dev.oidc.gov.bc.ca/auth" \
            | oc apply -f -

          oc process -f .github/openshift/deploy.admin.yml -p ZONE=${{ env.ZONE }} -p PROMOTE=${{ env.IMG }}-admin \
            -p URL=${{ env.URL }} -p CERTBOT=false -p REPLICA_COUNT=1 \
            | oc apply -f -

          oc process -f .github/openshift/deploy.public.yml -p ZONE=${{ env.ZONE }} -p PROMOTE=${{ env.IMG }}-public \
            -p URL=${{ env.URL }} -p CERTBOT=false -p REPLICA_COUNT=1 \
            | oc apply -f -

          # Follow any active rollouts (see deploymentconfigs)
          oc rollout status dc/${{ env.NAME }}-${{ github.event.number }}-db -w
          oc rollout status dc/${{ env.NAME }}-${{ github.event.number }}-api -w
          oc rollout status dc/${{ env.NAME }}-${{ github.event.number }}-admin -w
          oc rollout status dc/${{ env.NAME }}-${{ github.event.number }}-public -w

      - name: Add KeyCroak Redirect URL for Admin
        uses: bcgov/nr-keycloak-redirect@main
        id: add-keycroak
        with:
          add_delete: "add"
          redirect: https://${{ env.NAME }}-${{ github.event.number }}.apps.silver.devops.gov.bc.ca/*
          secret: ${{ secrets.KC_SECRET }}
          clientid: ${{ secrets.KC_CLIENTID }}
          clientid_2: "fom"
          realm: ${{ secrets.KC_REALM }}
          host: ${{ secrets.KC_HOST }}

      - name: Deployment Verification
        env:
          LINKS: (
            '${{ env.URL }}/api/district'
            '${{ env.URL }}/admin/'
            '${{ env.URL }}/public/'
            )
        run: |
          LINKS=${{ env.LINKS }}
          for l in "${LINKS[@]}"; do
              if [ $(curl -L --max-redirs 5 -s -o /dev/null -w "%{http_code}" "${l}") -ne 200 ]
              then
                  echo "Status != 200 for ${l}"
                  exit 1
              fi
          done

          echo "Deployment verification successful"
