name: Pull Request

on:
  pull_request:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  NAME: fom

jobs:
  build-db:
    name: Build-DB
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Log in to the Container registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Build and push API Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: db/Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ github.repository }}:${{ github.event.number }}-db
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-api:
    name: Build-API
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Log in to the Container registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Build and push API Docker image
        uses: docker/build-push-action@v2
        with:
          context: ./api
          file: api/Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ github.repository }}:${{ github.event.number }}-api
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-public:
    name: Build-Public
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Log in to the Container registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Build and push Public Frontend Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: public/Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ github.repository }}:${{ github.event.number }}-public
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-admin:
    name: Build-Admin
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Log in to the Container registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Build and push Admin Frontend Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: admin/Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ github.repository }}:${{ github.event.number }}-admin
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-dev:
    name: Deploy-Dev
    needs:
      - build-db
      - build-api
      - build-admin
      - build-public
    runs-on: ubuntu-latest
    environment:
      name: dev
    steps:
      - uses: actions/checkout@v2
      - name: Deploy
        run: |
          set -eux

          # Login to OpenShift and select project
          oc login --token=${{ secrets.OC_TOKEN }} --server=${{ secrets.OC_SERVER }}
          oc project ${{ secrets.NAMESPACE }}

          # Init (db secret), only if necessary
          oc process -f .github/openshift/init.database.yml -p ZONE=${{ github.event.number }} \
            | oc create -f - || \
            echo "Already initialized"

          # Clear stale images for import/replacement
          if [ $(oc get is -l app=${{ env.NAME }}-${{ github.event.number }} -o name | wc -l) -gt 0 ]; then
            oc delete is -l app=${{ env.NAME }}-${{ github.event.number }}
          fi

          # Process and apply deployment templates
          oc process -f .github/openshift/deploy.database.yml -p ZONE=${{ github.event.number }} \
            -p PROMOTE=${{ github.repository }}:${{ github.event.number }}-db | oc apply -f -
          oc process -f .github/openshift/deploy.api.yml -p ZONE=${{ github.event.number }} \
            -p PROMOTE=${{ github.repository }}:${{ github.event.number }}-api -p DB_TESTDATA=true \
            -p NAMESPACE=${{ secrets.NAMESPACE }} \
            | oc apply -f -
          oc process -f .github/openshift/deploy.admin.yml -p ZONE=${{ github.event.number }} \
            -p PROMOTE=${{ github.repository }}:${{ github.event.number }}-admin \
            | oc apply -f -
          oc process -f .github/openshift/deploy.public.yml -p ZONE=${{ github.event.number }} \
            -p PROMOTE=${{ github.repository }}:${{ github.event.number }}-public \
            | oc apply -f -

          # Follow any active rollouts (see deploymentconfigs)
          oc rollout status dc/${{ env.NAME }}-${{ github.event.number }}-db -w
          oc rollout status dc/${{ env.NAME }}-${{ github.event.number }}-api -w
          oc rollout status dc/${{ env.NAME }}-${{ github.event.number }}-admin -w
          oc rollout status dc/${{ env.NAME }}-${{ github.event.number }}-public -w

      - name: Add KeyCroak Redirect URL for Admin
        uses: bcgov/nr-keycloak-redirect@main
        id: add-keycroak
        with:
          add_delete: "add"
          redirect: https://${{ env.NAME }}-${{ github.event.number }}.apps.silver.devops.gov.bc.ca/admin
          secret: ${{ secrets.KC_SECRET }}
          clientid: ${{ secrets.KC_CLIENTID }}
          clientid_2: "fom"
          realm: ${{ secrets.KC_REALM }}
          host: ${{ secrets.KC_HOST }}

      - name: Deployment update
        uses: mshick/add-pr-comment@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          allow-repeats: false
          message: |
            [Dev - api](https://${{ env.NAME }}-${{ github.event.number }}.apps.silver.devops.gov.bc.ca/api) available
            [Dev - admin](https://${{ env.NAME }}-${{ github.event.number }}.apps.silver.devops.gov.bc.ca/admin) available
            [Dev - public](https://${{ env.NAME }}-${{ github.event.number }}.apps.silver.devops.gov.bc.ca/public) available

  deploy-test:
    name: Deploy-Test
    needs:
      - deploy-dev
    runs-on: ubuntu-latest
    environment:
      name: test
    env:
      ZONE: test
    steps:
      - uses: actions/checkout@v2
      - name: Deploy
        run: |
          set -eux
          # Login to OpenShift and select project
          oc login --token=${{ secrets.OC_TOKEN }} --server=${{ secrets.OC_SERVER }}
          oc project ${{ secrets.NAMESPACE }}

          # Init (db secret), only if necessary
          oc process -f .github/openshift/init.database.yml -p ZONE=${ZONE} \
            | oc create -f - || \
            echo "Already initialized"

          # Clear stale images for import/replacement
          if [ $(oc get is -l app=${{ env.NAME }}-${ZONE} -o name | wc -l) -gt 0 ]; then
            oc delete is -l app=${{ env.NAME }}-${ZONE}
          fi

          # Process and apply deployment templates
          oc process -f .github/openshift/deploy.database.yml -p ZONE=${ZONE} \
            -p PROMOTE=${{ github.repository }}:${{ github.event.number }}-db | oc apply -f -
          oc process -f .github/openshift/deploy.api.yml -p ZONE=${ZONE} \
            -p PROMOTE=${{ github.repository }}:${{ github.event.number }}-api \
            -p KEYCLOAK_URL="https://test.oidc.gov.bc.ca/auth" -p DB_TESTDATA=true \
            -p NAMESPACE=${{ secrets.NAMESPACE }} \
            | oc apply -f -
          oc process -f .github/openshift/deploy.admin.yml -p ZONE=${ZONE} \
            -p PROMOTE=${{ github.repository }}:${{ github.event.number }}-admin \
            | oc apply -f -
          oc process -f .github/openshift/deploy.public.yml -p ZONE=${ZONE} \
            -p PROMOTE=${{ github.repository }}:${{ github.event.number }}-public \
            | oc apply -f -

          # Follow any active rollouts (see deploymentconfigs)
          oc rollout status dc/${{ env.NAME }}-${ZONE}-db -w
          oc rollout status dc/${{ env.NAME }}-${ZONE}-api -w
          oc rollout status dc/${{ env.NAME }}-${ZONE}-admin -w
          oc rollout status dc/${{ env.NAME }}-${ZONE}-public -w

      - name: Deployment update
        uses: mshick/add-pr-comment@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          allow-repeats: false
          message: |
            [test - api](https://${{ env.NAME }}-${{ env.ZONE }}.apps.silver.devops.gov.bc.ca/api) available
            [test - admin](https://${{ env.NAME }}-${{ env.ZONE }}.apps.silver.devops.gov.bc.ca/admin) available
            [test - public](https://${{ env.NAME }}-${{ env.ZONE }}.apps.silver.devops.gov.bc.ca/public) available

  deploy-prod:
    name: Deploy-Prod
    needs:
      - deploy-test
    runs-on: ubuntu-latest
    environment:
      name: prod
    env:
      ZONE: prod
    steps:
      - uses: actions/checkout@v2
      - name: Deploy
        run: |
          set -eux
          # Login to OpenShift and select project
          oc login --token=${{ secrets.OC_TOKEN }} --server=${{ secrets.OC_SERVER }}
          oc project ${{ secrets.NAMESPACE }}

          # Init (db secret), only if necessary
          oc process -f .github/openshift/init.database.yml -p ZONE=${ZONE} \
            | oc create -f - || \
            echo "Already initialized"

          # Clear stale images for import/replacement
          if [ $(oc get is -l app=${{ env.NAME }}-${ZONE} -o name | wc -l) -gt 0 ]; then
            oc delete is -l app=${{ env.NAME }}-${ZONE}
          fi

          # Process and apply deployment templates
          oc process -f .github/openshift/deploy.database.yml -p ZONE=${ZONE} \
            -p PROMOTE=${{ github.repository }}:${{ github.event.number }}-db | oc apply -f -
          oc process -f .github/openshift/deploy.api.yml -p ZONE=${ZONE} \
            -p PROMOTE=${{ github.repository }}:${{ github.event.number }}-api \
            -p KEYCLOAK_URL="https://prod.oidc.gov.bc.ca/auth" -p DB_TESTDATA=false \
            -p NAMESPACE=${{ secrets.NAMESPACE }} \
            | oc apply -f -
          oc process -f .github/openshift/deploy.admin.yml -p ZONE=${ZONE} \
            -p PROMOTE=${{ github.repository }}:${{ github.event.number }}-admin \
            | oc apply -f -
          oc process -f .github/openshift/deploy.public.yml -p ZONE=${ZONE} \
            -p PROMOTE=${{ github.repository }}:${{ github.event.number }}-public \
            | oc apply -f -

          # Follow any active rollouts (see deploymentconfigs)
          oc rollout status dc/${{ env.NAME }}-${ZONE}-db -w
          oc rollout status dc/${{ env.NAME }}-${ZONE}-api -w
          oc rollout status dc/${{ env.NAME }}-${ZONE}-admin -w
          oc rollout status dc/${{ env.NAME }}-${ZONE}-public -w

      - name: Deployment update
        uses: mshick/add-pr-comment@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          allow-repeats: false
          message: |
            [prod - api](https://${{ env.NAME }}-${{ env.ZONE }}.apps.silver.devops.gov.bc.ca/api) available
            [prod - admin](https://${{ env.NAME }}-${{ env.ZONE }}.apps.silver.devops.gov.bc.ca/admin) available
            [prod - public](https://${{ env.NAME }}-${{ env.ZONE }}.apps.silver.devops.gov.bc.ca/public) available
