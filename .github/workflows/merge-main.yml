name: Main Merge

on:
  push:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  NAME: fom

jobs:
  codeql:
    name: Semantic Code Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Initialize
        uses: github/codeql-action/init@v2
        with:
          languages: javascript

      # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).
      # If this step fails, then you should remove it and run the build manually (see below)
      - name: Autobuild
        uses: github/codeql-action/autobuild@v2

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  # https://github.com/snyk/snyk
  snyk:
    name: Dependency Report
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        continue-on-error: true # To make sure that SARIF upload gets called
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --all-projects --severity-threshold=high --sarif-file-output=snyk.sarif

      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: snyk.sarif

  sonarcloud:
    name: Static Analysis
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        # Disable shallow clone for SonarCloud analysis
        with:
          fetch-depth: 0

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.exclusions=**/test/**,.github/**/*
            -Dsonar.organization=bcgov-sonarcloud
            -Dsonar.project.monorepo.enabled=true
            -Dsonar.projectKey=nr-fom

  # https://github.com/marketplace/actions/aqua-security-trivy
  trivy-repo:
    name: Repository Report
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Run Trivy vulnerability scanner in repo mode
        uses: aquasecurity/trivy-action@0.3.0
        with:
          scan-type: "fs"
          ignore-unfixed: true
          format: "sarif"
          output: "trivy-results.sarif"
          severity: "CRITICAL"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: "trivy-results.sarif"

  deploy-test:
    name: TEST Deployment
    runs-on: ubuntu-latest
    environment:
      name: test
    env:
      ZONE: test
    steps:
      - uses: actions/checkout@v2
      - name: Deploy
        run: |
          set -eux

          # Login to OpenShift and select project
          oc login --token=${{ secrets.OC_TOKEN }} --server=${{ secrets.OC_SERVER }}
          oc project ${{ secrets.NAMESPACE }}

          # Clear stale images for import/replacement
          if [ $(oc get is -l app=${{ env.NAME }}-${{ env.ZONE }} -o name | grep -v database | wc -l) -gt 0 ]; then
            oc delete is -l app=${{ env.NAME }}-${{ env.ZONE }}
          fi

          # Process and apply deployment templates
          oc process -f .github/openshift/deploy.database.yml -p ZONE=${{ env.ZONE }} \
            -p PROMOTE=${{ github.repository }}:${{ env.ZONE }}-db | oc apply -f -
          oc process -f .github/openshift/deploy.api.yml -p ZONE=${{ env.ZONE }} \
            -p PROMOTE=${{ github.repository }}:${{ env.ZONE }}-api -p DB_TESTDATA=true \
            -p NAMESPACE=${{ secrets.NAMESPACE }} \
            | oc apply -f -
          oc process -f .github/openshift/deploy.admin.yml -p ZONE=${{ env.ZONE }} \
            -p PROMOTE=${{ github.repository }}:${{ env.ZONE }}-admin \
            | oc apply -f -
          oc process -f .github/openshift/deploy.public.yml -p ZONE=${{ env.ZONE }} \
            -p PROMOTE=${{ github.repository }}:${{ env.ZONE }}-public \
            | oc apply -f -

          # Follow any active rollouts (see deploymentconfigs)
          oc rollout status dc/${{ env.NAME }}-${{ env.ZONE }}-db -w
          oc rollout status dc/${{ env.NAME }}-${{ env.ZONE }}-api -w
          oc rollout status dc/${{ env.NAME }}-${{ env.ZONE }}-admin -w
          oc rollout status dc/${{ env.NAME }}-${{ env.ZONE }}-public -w

          # Remove completed build runs, build pods and deployment pods
          for p in $(oc get po | grep "Completed" | awk '{print $1}')
          do
            oc delete po ${p}
          done

  zap-api:
    name: API Pen Tests
    needs:
      - deploy-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: ZAP Scan
        uses: zaproxy/action-full-scan@v0.3.0
        with:
          target: https://${{ env.NAME }}-test.apps.silver.devops.gov.bc.ca/api
          cmd_options: "-a"
          allow_issue_writing: false
          fail_action: false

  zap-admin:
    name: Admin Pen Tests
    needs:
      - deploy-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: ZAP Scan
        uses: zaproxy/action-full-scan@v0.3.0
        with:
          target: https://${{ env.NAME }}-test.apps.silver.devops.gov.bc.ca/admin
          cmd_options: "-a"
          allow_issue_writing: false
          fail_action: false

  zap-public:
    name: Publid Pen Tests
    needs:
      - deploy-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: ZAP Scan
        uses: zaproxy/action-full-scan@v0.3.0
        with:
          target: https://${{ env.NAME }}-test.apps.silver.devops.gov.bc.ca/public
          cmd_options: "-a"
          allow_issue_writing: false
          fail_action: false

  deploy-prod:
    name: PROD Deployment
    needs:
      - zap-api
      - zap-admin
      - zap-public
    runs-on: ubuntu-latest
    environment:
      name: prod
    env:
      ZONE: prod
      PREV: test
    steps:
      - uses: actions/checkout@v2
      - name: Deploy
        run: |
          set -eux

          # Login to OpenShift and select project
          oc login --token=${{ secrets.OC_TOKEN }} --server=${{ secrets.OC_SERVER }}
          oc project ${{ secrets.NAMESPACE }}

          # Clear stale images for import/replacement
          if [ $(oc get is -l app=${{ env.NAME }}-${{ env.ZONE }} -o name | grep -v database | wc -l) -gt 0 ]; then
            oc delete is -l app=${{ env.NAME }}-${{ env.ZONE }}
          fi

          # Process and apply deployment templates
          oc process -f .github/openshift/deploy.database.yml -p ZONE=${{ env.ZONE }} \
            -p PROMOTE=${{ github.repository }}:${{ env.PREV }}-db | oc apply -f -
          oc process -f .github/openshift/deploy.api.yml -p ZONE=${{ env.ZONE }} \
            -p PROMOTE=${{ github.repository }}:${{ env.PREV }}-api \
            -p NAMESPACE=${{ secrets.NAMESPACE }} \
            | oc apply -f -
          oc process -f .github/openshift/deploy.admin.yml -p ZONE=${{ env.ZONE }} \
            -p PROMOTE=${{ github.repository }}:${{ env.PREV }}-admin \
            | oc apply -f -
          oc process -f .github/openshift/deploy.public.yml -p ZONE=${{ env.ZONE }} \
            -p PROMOTE=${{ github.repository }}:${{ env.PREV }}-public \
            | oc apply -f -

          # Follow any active rollouts (see deploymentconfigs)
          oc rollout status dc/${{ env.NAME }}-${{ env.ZONE }}-db -w
          oc rollout status dc/${{ env.NAME }}-${{ env.ZONE }}-api -w
          oc rollout status dc/${{ env.NAME }}-${{ env.ZONE }}-admin -w
          oc rollout status dc/${{ env.NAME }}-${{ env.ZONE }}-public -w

          # Remove completed build runs, build pods and deployment pods
          for p in $(oc get po | grep "Completed" | awk '{print $1}')
          do
            oc delete po ${p}
          done

      - name: Promote Database Image to PROD
        uses: shrink/actions-docker-registry-tag@v2
        with:
          registry: ghcr.io
          repository: ${{ github.repository }}
          target: test-db
          tags: |
            prod-db
      - name: Promote API Image to PROD
        uses: shrink/actions-docker-registry-tag@v2
        with:
          registry: ghcr.io
          repository: ${{ github.repository }}
          target: test-api
          tags: |
            prod-api
      - name: Promote Admin Image to PROD
        uses: shrink/actions-docker-registry-tag@v2
        with:
          registry: ghcr.io
          repository: ${{ github.repository }}
          target: test-admin
          tags: |
            prod-admin
      - name: Promote Public Image to PROD
        uses: shrink/actions-docker-registry-tag@v2
        with:
          registry: ghcr.io
          repository: ${{ github.repository }}
          target: test-public
          tags: |
            prod-public
