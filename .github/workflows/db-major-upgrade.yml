name: Database Upgrade (dispatch)

on:
  workflow_dispatch:
    inputs:
      target:
        description: Deployment target; usually PR number, test, or prod
        type: string
        required: true

permissions: {}

env:
  NAME: fom
  COMPONENT: db
  DB_UPGRADE_VERSION: v17

jobs:
  db-major-upgrade:
    runs-on: ubuntu-latest
    permissions:
      packages: write
    env:
      ZONE: ${{ inputs.target }}

    steps:
    - name: Checkout
      if: ${{ inputs.target != 'prod' }}
      uses: actions/checkout@v4

    - name: Build and Push Docker Image (for db upgrade)
      if: ${{ inputs.target != 'prod' }}
      uses: bcgov/action-builder-ghcr@v2.3.0
      with:
        package: ${{ env.COMPONENT }}
        build_context: ./db
        build_file: ./db/Dockerfile-V17
        tag: ${{ env.DB_UPGRADE_VERSION }}-upgrade
        tag_fallback: latest
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: OpenShift Init
      if: ${{ env.ZONE != 'prod' }}
      uses: bcgov/action-deployer-openshift@v3.2.0
      with:
        oc_namespace: ${{ vars.OC_NAMESPACE }}
        oc_server: ${{ vars.OC_SERVER }}
        oc_token: ${{ secrets.OC_TOKEN }}
        file: libs/openshift.init.yml
        overwrite: false
        parameters: -p ZONE=${{ env.ZONE }}

    - name: OpenShift Deploy (db upgrade container)
      if: ${{ env.ZONE != 'prod' }}
      uses: bcgov/action-deployer-openshift@v3.2.0
      with:
        file: db/openshift.deploy.dbupgrade.v17.yml
        oc_namespace: ${{ vars.OC_NAMESPACE }}
        oc_server: ${{ vars.OC_SERVER }}
        oc_token: ${{ secrets.OC_TOKEN }}
        overwrite: true
        parameters:
          -p ZONE=${{ env.ZONE }}
        triggers: ('db')

    - name: Verify upgrade db Deployment Readiness
      if: ${{ env.ZONE != 'prod' }}
      run: |
        echo "Checking if deployment is ready..."
        for i in {1..30}; do
          READY_REPLICAS=$(oc get deployment ${NAME}-${ZONE}-${COMPONENT}-${DB_UPGRADE_VERSION} -n ${{ vars.OC_NAMESPACE }} -o jsonpath='{.status.readyReplicas}' || echo "0")
          if [ "$READY_REPLICAS" == "1" ]; then
            echo "Deployment is ready."
            exit 0
          fi
          echo "Deployment not ready yet. Retrying in 5 seconds..."
          sleep 5
        done
        echo "Error: Deployment did not become ready within the timeout period."
        exit 1

